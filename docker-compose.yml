services:
  uber_zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: uber_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5
  uber_kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: uber_kafka
    depends_on:
      uber_zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'uber_zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://uber_kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 5s
      timeout: 5s
      retries: 5
  uber_api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: uber_api
    depends_on:
      uber_postgis:
        condition: service_healthy
      uber_kafka:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@uber_postgis:5432/food_delivery
      KAFKA_BOOTSTRAP_SERVERS: uber_kafka:29092
      KAFKA_TOPIC: driver-pos
      DRIVER_API_URL: http://uber_driver_api:8002
    command: uvicorn api:app --host 0.0.0.0 --port 8000
    restart: on-failure
  uber_driver_api:
    build:
      context: ./driver_api
      dockerfile: Dockerfile
    container_name: uber_driver_api
    depends_on:
      uber_postgis:
        condition: service_healthy
    ports:
      - "8002:8002"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@uber_postgis:5432/food_delivery
    command: uvicorn api:app --host 0.0.0.0 --port 8002
    restart: on-failure
  uber_driver_events:
    build:
      context: ./driver_events
      dockerfile: Dockerfile
    container_name: uber_driver_events
    depends_on:
      uber_kafka:
        condition: service_healthy
      uber_driver_api:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: uber_kafka:29092
      KAFKA_TOPIC: driver-pos
      DRIVER_API_URL: http://uber_driver_api:8002
    command: python kafka_consumer.py
    restart: on-failure
  uber_mosquitto:
    image: eclipse-mosquitto:latest
    container_name: uber_mosquitto
    environment:
      - TZ=Europe/Madrid    
    volumes:
      - .mosquitto/config:/mosquitto/config
      - .mosquitto/data:/mosquitto/data
      - .mosquitto/log:/mosquitto/log
    ports:
      - 1883:1883
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 5s
      timeout: 10s
      retries: 3
  uber_postgis:
    image: postgis/postgis:16-3.4
    container_name: uber_postgis
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: food_delivery
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  mqtt_kafka_bridge:
    build:
      context: ./python_mqtt
      dockerfile: Dockerfile
    container_name: uber_mqtt_kafka_bridge
    depends_on:
      uber_mosquitto:
        condition: service_healthy
      uber_kafka:
        condition: service_healthy
    environment:
      MQTT_BROKER_HOST: uber_mosquitto
      MQTT_BROKER_PORT: 1883
      MQTT_TOPIC: sensor/data
      KAFKA_BOOTSTRAP_SERVERS: uber_kafka:29092
      KAFKA_TOPIC: driver-pos
    restart: on-failure

volumes:
  postgres_data:
